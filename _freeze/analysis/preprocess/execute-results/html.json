{
  "hash": "086c8d3e778327b0669918f595503cdf",
  "result": {
    "markdown": "---\ntitle: Pre-process\nsubtitle: A slightly longer title\nformat:\n  360-analysis-html: default\nauthor: James Goldie\ndate: last-modified\ncode-fold: true\n---\n\n\nObserved and interpolated subsistence rates are available for each city as geoTIFFs from [NTU Dataverse](https://researchdata.ntu.edu.sg/dataset.xhtml?persistentId=doi:10.21979/N9/GPVX0F).\n\nAlthough some Dataverse instances have an API, I couldn't verify that this one does. Instead, you can [download the dataset manually](https://researchdata.ntu.edu.sg/dataset.xhtml?persistentId=doi:10.21979/N9/GPVX0F) and place it in `/data` as `dataverse_files.zip`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n:::\n\n```{.r .cell-code}\nlibrary(sf)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nLinking to GEOS 3.10.2, GDAL 3.4.1, PROJ 8.2.1; sf_use_s2() is TRUE\n```\n:::\n\n```{.r .cell-code}\nlibrary(terra)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nterra 1.7.29\n\nAttaching package: 'terra'\n\nThe following object is masked from 'package:tidyr':\n\n    extract\n```\n:::\n\n```{.r .cell-code}\nlibrary(tidyterra)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'tidyterra'\n\nThe following object is masked from 'package:stats':\n\n    filter\n```\n:::\n\n```{.r .cell-code}\nlibrary(here)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nhere() starts at /workspaces/report-sinking-cities\n```\n:::\n:::\n\n\nLet's first unzip the dataverse files:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# unzip the downloaded dataverse zip\nunzip(\n  here(\"data\", \"dataverse_files.zip\"),\n  exdir = here(\"data\", \"src\"))\n\n# unzip each city\nlist.files(here(\"data\", \"src\"), pattern = glob2rx(\"*.zip\"),\n  full.names = TRUE) %>%\n  walk(unzip, exdir = here(\"data\", \"src\"))\n\n# delete the city zip files\nunlink(here(\"data\", \"src\", \"*.zip\"), expand = TRUE)\n```\n:::\n\n\nEach city has four geoTIFFs:\n\n* `velocity_InSAR`: the subsistence velocity observed using InSAR;\n* `velocity_interpolation`: the subsistence velocity interpolated between observations;\n* `velocityStd_InSAR`: the standard deviation of the observed velocity; and\n* `velocityStd_interpolation`: the standard deviation of the interpolated velocity.\n\n:::{.callout-note}\nthe velocities and standard deviations of them are both in units of m yr^-1^. The paper's figures present them in units of mm yr^-1^.\n:::\n\nFor each city, I want to:\n\n1. Combine the two velocity maps and the two SD maps;\n2. Calculate a normalised standard deviation\n3. Mask the combined velocity map using bins of the combined SD map.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntibble(\n  path = list.files(here(\"data\", \"src\"), pattern = glob2rx(\"*.tif\"),\n    full.names = TRUE),\n  fname = str_remove(basename(path), \".tif\")) %>%\n  # discard the area bmsl files\n  filter(str_detect(fname, \"areaBMSL\", negate = TRUE)) %>%\n  # extract filename info\n  separate(fname,\n    into = c(\"city_name\", \"city_code\", \"measure\", \"source\"),\n    sep = \"_\") ->\ncity_maps\n```\n:::\n\n\nWe'll need to use `{terra}` or a similar raster package to do the above two tasks.\n\nFirst, we need functions to do the two tasks above:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# combine_maps: load two geotiff paths in, merge and write back to disk.\n# return the output path\ncombine_maps <- function(path_a, path_b, city, measure) {\n  out_path <- here(\"data\", \"1-combined\", paste0(city, \"_\", measure, \".tif\"))\n\n  merge(rast(path_a), rast(path_b), filename = out_path, overwrite = TRUE)\n  return(out_path)\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nget_norm_sd <- function(velocity_path, sd_path, city) {\n  out_path <- here(\"data\", \"1-combined\",\n    paste0(city, \"_velocityNormStd\", \".tif\"))\n\n  norm_sd <- rast(sd_path) / rast(velocity_path)\n  writeRaster(norm_sd, out_path, overwrite = TRUE)\n  return(out_path)\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# mask_map: given a velocity raster and a normalised std deviation path,\n# clip the velocities to only contain cells with normalised SD within an\n# absolute range of low to high. return the path of the result (written to disk)\nmask_map <- function(velocity_path, normsd_path, low, high, city, thresh_label) {\n  out_path <- here(\"data\", \"2-masked\",\n    paste0(city, \"_\", thresh_label, \"p.tif\"))\n\n  vel <- rast(velocity_path)\n  normsd <- rast(normsd_path)\n  \n  # get an absolute value of the normalised sd\n  abs_normsd <- ifel(normsd < 0, -normsd, normsd)\n\n  # first mask the normalised sd to within the absolute threshold\n  normsd_thresh <- ifel(abs_normsd > high | abs_normsd < low, NA, abs_normsd)\n\n  # then mask the velocity map based on the remaining normalised sd map\n  mask(vel, normsd_thresh, filename = out_path, overwrite = TRUE)\n\n  return(out_path)\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndir.create(here(\"data\", \"1-combined\"), showWarnings = FALSE)\ndir.create(here(\"data\", \"2-masked\"), showWarnings = FALSE)\n\ncity_maps %>%\n  group_by(city_name, measure) %>%\n  # TODO - assert two rows per group\n  summarise(\n    path = combine_maps(path[1], \n      path[2], city_name[1], measure[1])) %>%\n  ungroup() ->\ncity_maps_combined\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`summarise()` has grouped output by 'city_name'. You can override using the\n`.groups` argument.\n```\n:::\n\n```{.r .cell-code}\n# calculate the normalised standard deviations\ncity_maps_combined %>%\n  # ensure velocity is first in each group and sd is second\n  arrange(measure) %>%\n  group_by(city_name) %>%\n  summarise(path = get_norm_sd(path[1], path[2], city_name[1])) %>%\n  ungroup() %>%\n  mutate(measure = \"velocityNormStd\") ->\ncity_norm_sds\n\n# combine the normalised standard velocities with the velocities (drop the sds)\ncity_maps_combined %>%\n  filter(measure == \"velocity\") %>%\n  bind_rows(city_norm_sds) %>%\n  arrange(city_name, measure) ->\ncity_maps_all\n\n# now do the masking, in bins of normalised standard deviation:\n# 0-25%, 25-50%, 50-1005, > 100%\ncity_maps_all %>%\n  group_by(city_name) %>%\n  summarise(\n    masked_path_0to25p =\n      mask_map(path[1], path[2], 0,    0.25, city_name[1], \"0to25p\"),\n    masked_path_25to50p =\n      mask_map(path[1], path[2], 0.25, 0.5,  city_name[1], \"25to50p\"),\n    masked_path_50to100p =\n      mask_map(path[1], path[2], 0.5,  1,    city_name[1], \"50to100p\"),\n    masked_path_gt100p =\n      mask_map(path[1], path[2], 1,    Inf,  city_name[1], \"gt100p\")) ->\ncity_maps_masked\n```\n:::\n\n\nWe also need to convert these TIFFs to PNGs for web display, and we need to run off their extents (along with the reference point KMLs) as a data frame to help us fit the PNGs on the map.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# get_range_bounds: given a raster path, return a list containing:\n#   - the `min` and `max` values of the raster band\n#   - the \nget_range_bounds <- function(path) {\n  \n  # open raster and get summary and extent\n  vel <- rast(path)\n  vel_summary <- summary(vel)\n\n  # extract raster range from summary\n  vel_min <-\n    vel_summary %>% pluck(1) %>% str_remove(\"Min.   :\") %>% as.numeric()\n  vel_max <-\n    vel_summary %>% pluck(6) %>% str_remove(\"Max.   :\") %>% as.numeric()\n\n  return(list(\n    min = vel_min,\n    max = vel_max,\n    xmin = xmin(vel),\n    xmax = xmax(vel),\n    ymin = ymin(vel),\n    ymax = ymax(vel)))\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncity_maps_masked %>%\n  pivot_longer(starts_with(\"masked\"), names_to = \"measure\",\n    values_to = \"path\") %>%\n  mutate(\n    range_bounds = map(path, get_range_bounds),\n    measure = str_remove(measure, \"masked_path_\"),\n    filename = basename(path)) %>%\n  unnest_wider(range_bounds) ->\ncity_maps_info\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: There were 164 warnings in `mutate()`.\nThe first warning was:\nℹ In argument: `range_bounds = map(path, get_range_bounds)`.\nCaused by warning:\n! [summary] used a sample\nℹ Run `dplyr::last_dplyr_warnings()` to see the 163 remaining warnings.\n```\n:::\n\n```{.r .cell-code}\n# export to csv (dropping paths)\ncity_maps_info %>%\n  select(filename, min, max, xmin, xmax, ymin, ymax) %>%\n  write_csv(here(\"data\", \"map-bounds-extent.csv\"))\n```\n:::\n\n\nWe want to ensure all the maps are made using a common, symmetrical colour scale.\nTo do that, I'll get a range that covers all of the cities' data ranges, and I'll push it out so that it's symmetrical around zero:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndir.create(here(\"data\", \"3-pngs\"), showWarnings = FALSE)\n\n# first, we need to settle on a common range that encompasses all the files\n# (and make it symmetrical around 0)\ndata_range <- c(\n  min(city_maps_info$min, na.rm = TRUE),\n  max(city_maps_info$max, na.rm = TRUE)) %>%\n  abs() %>%\n  max()\n\n# compute breaks based on that range\nnumber_colours <- 10\npalette_breaks <- seq(-data_range, data_range, length.out = number_colours + 1)\n```\n:::\n\n\nHere's our plotting function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# plot_raster_png: save the raster as a png (using tidyterra to make applying\n# a common scale across files much easier)\nplot_raster_png <- function(path) {\n\n  vel <- rast(path)\n\n  # use zero scale expansion + void theme to remove margins\n  vel_plot <- ggplot() +\n    geom_spatraster(data = vel) +\n    scale_fill_fermenter(\n      type = \"div\",\n      palette = \"RdYlBu\",\n      direction = 1,\n      na.value = NA,\n      # use `breaks` and `limits` to supply our common breaks\n      # (and force all of them to be used)\n      breaks = palette_breaks,\n      limits = range(palette_breaks),\n      guide = NULL) +\n    # push plot out to edges of the panel\n    scale_x_continuous(expand = expansion(0, 0)) +\n    scale_y_continuous(expand = expansion(0, 0)) +\n    # remove backgrounds and other elements\n    theme_void() +\n    theme(\n      plot.background = element_blank(),\n      panel.background = element_blank())\n\n  ggsave(\n    here(\"data\", \"3-pngs\", str_replace(basename(path), \".tif$\", \".png\")),\n    vel_plot,\n    dpi = 72)\n\n}\n```\n:::\n\n\nLet's do the export on each processed TIF now:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncity_maps_info %>%\n  pull(path) %>%\n  walk(plot_raster_png)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nSaving 7 x 5 in image\nSaving 7 x 5 in image\nSaving 7 x 5 in image\nSaving 7 x 5 in image\nSpatRaster resampled to ncells = 500976\n\nSaving 7 x 5 in image\nSpatRaster resampled to ncells = 500976\n\nSaving 7 x 5 in image\nSpatRaster resampled to ncells = 500976\n\nSaving 7 x 5 in image\nSpatRaster resampled to ncells = 500976\n\nSaving 7 x 5 in image\nSpatRaster resampled to ncells = 501320\n\nSaving 7 x 5 in image\nSpatRaster resampled to ncells = 501320\n\nSaving 7 x 5 in image\nSpatRaster resampled to ncells = 501320\n\nSaving 7 x 5 in image\nSpatRaster resampled to ncells = 501320\n\nSaving 7 x 5 in image\nSaving 7 x 5 in image\nSaving 7 x 5 in image\nSaving 7 x 5 in image\nSaving 7 x 5 in image\nSaving 7 x 5 in image\nSaving 7 x 5 in image\nSaving 7 x 5 in image\nSaving 7 x 5 in image\nSaving 7 x 5 in image\nSaving 7 x 5 in image\nSaving 7 x 5 in image\nSaving 7 x 5 in image\nSaving 7 x 5 in image\nSaving 7 x 5 in image\nSaving 7 x 5 in image\nSaving 7 x 5 in image\nSaving 7 x 5 in image\nSaving 7 x 5 in image\nSaving 7 x 5 in image\nSaving 7 x 5 in image\nSpatRaster resampled to ncells = 500465\n\nSaving 7 x 5 in image\nSpatRaster resampled to ncells = 500465\n\nSaving 7 x 5 in image\nSpatRaster resampled to ncells = 500465\n\nSaving 7 x 5 in image\nSpatRaster resampled to ncells = 500465\n\nSaving 7 x 5 in image\nSaving 7 x 5 in image\nSaving 7 x 5 in image\nSaving 7 x 5 in image\nSaving 7 x 5 in image\nSaving 7 x 5 in image\nSaving 7 x 5 in image\nSaving 7 x 5 in image\nSaving 7 x 5 in image\nSaving 7 x 5 in image\nSaving 7 x 5 in image\nSaving 7 x 5 in image\nSaving 7 x 5 in image\nSpatRaster resampled to ncells = 500588\n\nSaving 7 x 5 in image\nSpatRaster resampled to ncells = 500588\n\nSaving 7 x 5 in image\nSpatRaster resampled to ncells = 500588\n\nSaving 7 x 5 in image\nSpatRaster resampled to ncells = 500588\n\nSaving 7 x 5 in image\nSpatRaster resampled to ncells = 500535\n\nSaving 7 x 5 in image\nSpatRaster resampled to ncells = 500535\n\nSaving 7 x 5 in image\nSpatRaster resampled to ncells = 500535\n\nSaving 7 x 5 in image\nSpatRaster resampled to ncells = 500535\n\nSaving 7 x 5 in image\nSpatRaster resampled to ncells = 500308\n\nSaving 7 x 5 in image\nSpatRaster resampled to ncells = 500308\n\nSaving 7 x 5 in image\nSpatRaster resampled to ncells = 500308\n\nSaving 7 x 5 in image\nSpatRaster resampled to ncells = 500308\n\nSaving 7 x 5 in image\nSpatRaster resampled to ncells = 501034\n\nSaving 7 x 5 in image\nSpatRaster resampled to ncells = 501034\n\nSaving 7 x 5 in image\nSpatRaster resampled to ncells = 501034\n\nSaving 7 x 5 in image\nSpatRaster resampled to ncells = 501034\n\nSaving 7 x 5 in image\nSpatRaster resampled to ncells = 500736\n\nSaving 7 x 5 in image\nSpatRaster resampled to ncells = 500736\n\nSaving 7 x 5 in image\nSpatRaster resampled to ncells = 500736\n\nSaving 7 x 5 in image\nSpatRaster resampled to ncells = 500736\n\nSaving 7 x 5 in image\nSaving 7 x 5 in image\nSaving 7 x 5 in image\nSaving 7 x 5 in image\nSaving 7 x 5 in image\nSpatRaster resampled to ncells = 500520\n\nSaving 7 x 5 in image\nSpatRaster resampled to ncells = 500520\n\nSaving 7 x 5 in image\nSpatRaster resampled to ncells = 500520\n\nSaving 7 x 5 in image\nSpatRaster resampled to ncells = 500520\n\nSaving 7 x 5 in image\nSpatRaster resampled to ncells = 500858\n\nSaving 7 x 5 in image\nSpatRaster resampled to ncells = 500858\n\nSaving 7 x 5 in image\nSpatRaster resampled to ncells = 500858\n\nSaving 7 x 5 in image\nSpatRaster resampled to ncells = 500858\n\nSaving 7 x 5 in image\nSpatRaster resampled to ncells = 500797\n\nSaving 7 x 5 in image\nSpatRaster resampled to ncells = 500797\n\nSaving 7 x 5 in image\nSpatRaster resampled to ncells = 500797\n\nSaving 7 x 5 in image\nSpatRaster resampled to ncells = 500797\n\nSaving 7 x 5 in image\nSpatRaster resampled to ncells = 501095\n\nSaving 7 x 5 in image\nSpatRaster resampled to ncells = 501095\n\nSaving 7 x 5 in image\nSpatRaster resampled to ncells = 501095\n\nSaving 7 x 5 in image\nSpatRaster resampled to ncells = 501095\n\nSaving 7 x 5 in image\nSpatRaster resampled to ncells = 500760\n\nSaving 7 x 5 in image\nSpatRaster resampled to ncells = 500760\n\nSaving 7 x 5 in image\nSpatRaster resampled to ncells = 500760\n\nSaving 7 x 5 in image\nSpatRaster resampled to ncells = 500760\n\nSaving 7 x 5 in image\nSpatRaster resampled to ncells = 501808\n\nSaving 7 x 5 in image\nSpatRaster resampled to ncells = 501808\n\nSaving 7 x 5 in image\nSpatRaster resampled to ncells = 501808\n\nSaving 7 x 5 in image\nSpatRaster resampled to ncells = 501808\n\nSaving 7 x 5 in image\nSpatRaster resampled to ncells = 500832\n\nSaving 7 x 5 in image\nSpatRaster resampled to ncells = 500832\n\nSaving 7 x 5 in image\nSpatRaster resampled to ncells = 500832\n\nSaving 7 x 5 in image\nSpatRaster resampled to ncells = 500832\n\nSaving 7 x 5 in image\nSaving 7 x 5 in image\nSaving 7 x 5 in image\nSaving 7 x 5 in image\nSaving 7 x 5 in image\nSaving 7 x 5 in image\nSaving 7 x 5 in image\nSaving 7 x 5 in image\nSaving 7 x 5 in image\nSaving 7 x 5 in image\nSaving 7 x 5 in image\nSaving 7 x 5 in image\nSaving 7 x 5 in image\nSaving 7 x 5 in image\nSaving 7 x 5 in image\nSaving 7 x 5 in image\nSaving 7 x 5 in image\nSaving 7 x 5 in image\nSaving 7 x 5 in image\nSaving 7 x 5 in image\nSaving 7 x 5 in image\nSaving 7 x 5 in image\nSaving 7 x 5 in image\nSaving 7 x 5 in image\nSaving 7 x 5 in image\nSaving 7 x 5 in image\nSaving 7 x 5 in image\nSaving 7 x 5 in image\nSaving 7 x 5 in image\nSpatRaster resampled to ncells = 501147\n\nSaving 7 x 5 in image\nSpatRaster resampled to ncells = 501147\n\nSaving 7 x 5 in image\nSpatRaster resampled to ncells = 501147\n\nSaving 7 x 5 in image\nSpatRaster resampled to ncells = 501147\n\nSaving 7 x 5 in image\nSaving 7 x 5 in image\nSaving 7 x 5 in image\nSaving 7 x 5 in image\nSaving 7 x 5 in image\nSpatRaster resampled to ncells = 500904\n\nSaving 7 x 5 in image\nSpatRaster resampled to ncells = 500904\n\nSaving 7 x 5 in image\nSpatRaster resampled to ncells = 500904\n\nSaving 7 x 5 in image\nSpatRaster resampled to ncells = 500904\n\nSaving 7 x 5 in image\nSaving 7 x 5 in image\nSaving 7 x 5 in image\nSaving 7 x 5 in image\nSaving 7 x 5 in image\nSpatRaster resampled to ncells = 500400\n\nSaving 7 x 5 in image\nSpatRaster resampled to ncells = 500400\n\nSaving 7 x 5 in image\nSpatRaster resampled to ncells = 500400\n\nSaving 7 x 5 in image\nSpatRaster resampled to ncells = 500400\n\nSaving 7 x 5 in image\nSaving 7 x 5 in image\nSaving 7 x 5 in image\nSaving 7 x 5 in image\nSaving 7 x 5 in image\nSaving 7 x 5 in image\nSaving 7 x 5 in image\nSaving 7 x 5 in image\nSaving 7 x 5 in image\nSaving 7 x 5 in image\nSaving 7 x 5 in image\nSaving 7 x 5 in image\nSaving 7 x 5 in image\nSpatRaster resampled to ncells = 500536\n\nSaving 7 x 5 in image\nSpatRaster resampled to ncells = 500536\n\nSaving 7 x 5 in image\nSpatRaster resampled to ncells = 500536\n\nSaving 7 x 5 in image\nSpatRaster resampled to ncells = 500536\n\nSaving 7 x 5 in image\nSaving 7 x 5 in image\nSaving 7 x 5 in image\nSaving 7 x 5 in image\nSaving 7 x 5 in image\nSpatRaster resampled to ncells = 500488\n\nSaving 7 x 5 in image\nSpatRaster resampled to ncells = 500488\n\nSaving 7 x 5 in image\nSpatRaster resampled to ncells = 500488\n\nSaving 7 x 5 in image\nSpatRaster resampled to ncells = 500488\n\nSaving 7 x 5 in image\nSpatRaster resampled to ncells = 501160\n\nSaving 7 x 5 in image\nSpatRaster resampled to ncells = 501160\n\nSaving 7 x 5 in image\nSpatRaster resampled to ncells = 501160\n\nSaving 7 x 5 in image\nSpatRaster resampled to ncells = 501160\n\nSaving 7 x 5 in image\nSpatRaster resampled to ncells = 500703\n\nSaving 7 x 5 in image\nSpatRaster resampled to ncells = 500703\n\nSaving 7 x 5 in image\nSpatRaster resampled to ncells = 500703\n\nSaving 7 x 5 in image\nSpatRaster resampled to ncells = 500703\n\nSaving 7 x 5 in image\nSpatRaster resampled to ncells = 500816\n\nSaving 7 x 5 in image\nSpatRaster resampled to ncells = 500816\n\nSaving 7 x 5 in image\nSpatRaster resampled to ncells = 500816\n\nSaving 7 x 5 in image\nSpatRaster resampled to ncells = 500816\n\nSaving 7 x 5 in image\nSaving 7 x 5 in image\nSaving 7 x 5 in image\nSaving 7 x 5 in image\nSaving 7 x 5 in image\nSaving 7 x 5 in image\nSaving 7 x 5 in image\nSaving 7 x 5 in image\nSaving 7 x 5 in image\n```\n:::\n:::\n",
    "supporting": [
      "preprocess_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}